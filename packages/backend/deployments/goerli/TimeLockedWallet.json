{
  "address": "0x4b0b9FcC7cf29e517D72af0eEb42550aCe8c8D3c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IsStillLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenId",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NATIVE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_forwarder",
          "type": "address"
        }
      ],
      "name": "setTrustedForwarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_unlockDate",
          "type": "uint256"
        }
      ],
      "name": "setUnlockDate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xba690202e4f49eb1b617c9bc365a195347a011053cba35236f62ca9e8d3885c2",
  "receipt": {
    "to": null,
    "from": "0x9CD1D3D5DB6f064eC7D138402dec8773109f94E4",
    "contractAddress": "0x4b0b9FcC7cf29e517D72af0eEb42550aCe8c8D3c",
    "transactionIndex": 111,
    "gasUsed": "1132451",
    "logsBloom": "0x
    "blockHash": "0xa6f6bbe0221456beed952a61cd9af7f0f91e6c64018a3a7645f072a646091c78",
    "transactionHash": "0xba690202e4f49eb1b617c9bc365a195347a011053cba35236f62ca9e8d3885c2",
    "logs": [
      {
        "transactionIndex": 111,
        "blockNumber": 8169693,
        "transactionHash": "0xba690202e4f49eb1b617c9bc365a195347a011053cba35236f62ca9e8d3885c2",
        "address": "0x4b0b9FcC7cf29e517D72af0eEb42550aCe8c8D3c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009cd1d3d5db6f064ec7d138402dec8773109f94e4"
        ],
        "data": "0x",
        "logIndex": 329,
        "blockHash": "0xa6f6bbe0221456beed952a61cd9af7f0f91e6c64018a3a7645f072a646091c78"
      }
    ],
    "blockNumber": 8169693,
    "cumulativeGasUsed": "27014141",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE041608922d06a4F26C0d4c27d8bCD01daf1f792"
  ],
  "numDeployments": 3,
  "solcInputHash": "d0d1d9378b74b083f9c59af8c692779e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IsStillLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenId\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_unlockDate\",\"type\":\"uint256\"}],\"name\":\"setUnlockDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address,uint256)\":{\"params\":{\"_amount\":\"Amount of tokens\",\"_token\":\"Address of the token\"}},\"deposit(address,uint256)\":{\"params\":{\"_amount\":\"Amount of tokens\",\"_token\":\"Address of the token\"}},\"getTrustedForwarder()\":{\"returns\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The address of the Forwarder contract that is being used.\"},\"returns\":{\"_0\":\"isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(address,uint256)\":{\"notice\":\"Transfers Native or ERC20 tokens from the contract to the recipient.\"},\"deposit(address,uint256)\":{\"notice\":\"Transfers Native or ERC20 tokens from the sender to the contract.\"},\"getTrustedForwarder()\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\"},\"isTrustedForwarder(address)\":{\"notice\":\":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TimeLockedWallet.sol\":\"TimeLockedWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@opengsn/contracts/src/ERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable no-inline-assembly\\npragma solidity >=0.6.9;\\n\\nimport \\\"./interfaces/IERC2771Recipient.sol\\\";\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Implementation\\n *\\n * @notice Note that this contract was called `BaseRelayRecipient` in the previous revision of the GSN.\\n *\\n * @notice A base contract to be inherited by any contract that want to receive relayed transactions.\\n *\\n * @notice A subclass must use `_msgSender()` instead of `msg.sender`.\\n */\\nabstract contract ERC2771Recipient is IERC2771Recipient {\\n\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address private _trustedForwarder;\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @notice Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet.\\n     * @return forwarder The address of the Forwarder contract that is being used.\\n     */\\n    function getTrustedForwarder() public virtual view returns (address forwarder){\\n        return _trustedForwarder;\\n    }\\n\\n    function _setTrustedForwarder(address _forwarder) internal {\\n        _trustedForwarder = _forwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgSender() internal override virtual view returns (address ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            // At this point we know that the sender is a trusted forwarder,\\n            // so we trust that the last bytes of msg.data are the verified sender address.\\n            // extract sender address from the end of msg.data\\n            assembly {\\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\\n            }\\n        } else {\\n            ret = msg.sender;\\n        }\\n    }\\n\\n    /// @inheritdoc IERC2771Recipient\\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\\n            return msg.data[0:msg.data.length-20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x77b3307c570c582969ea5466f296898ab9fea1f8b61b30f1c73345fe047a89a9\",\"license\":\"MIT\"},\"@opengsn/contracts/src/interfaces/IERC2771Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n/**\\n * @title The ERC-2771 Recipient Base Abstract Class - Declarations\\n *\\n * @notice A contract must implement this interface in order to support relayed transaction.\\n *\\n * @notice It is recommended that your contract inherits from the ERC2771Recipient contract.\\n */\\nabstract contract IERC2771Recipient {\\n\\n    /**\\n     * :warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.\\n     * @param forwarder The address of the Forwarder contract that is being used.\\n     * @return isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient.\\n     */\\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\\n\\n    /**\\n     * @notice Use this method the contract anywhere instead of msg.sender to support relayed transactions.\\n     * @return sender The real sender of this call.\\n     * For a call that came through the Forwarder the real sender is extracted from the last 20 bytes of the `msg.data`.\\n     * Otherwise simply returns `msg.sender`.\\n     */\\n    function _msgSender() internal virtual view returns (address);\\n\\n    /**\\n     * @notice Use this method in the contract instead of `msg.data` when difference matters (hashing, signature, etc.)\\n     * @return data The real `msg.data` of this call.\\n     * For a call that came through the Forwarder, the real sender address was appended as the last 20 bytes\\n     * of the `msg.data` - so this method will strip those 20 bytes off.\\n     * Otherwise (if the call was made directly and not through the forwarder) simply returns `msg.data`.\\n     */\\n    function _msgData() internal virtual view returns (bytes calldata);\\n}\\n\",\"keccak256\":\"0xc762358681e3494519a5fff2f7e3f0f74f9c9f395f23b00cdfb45e0fb9ef8170\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TimeLockedWallet.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.17;\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@opengsn/contracts/src/ERC2771Recipient.sol\\\";\\n\\ncontract TimeLockedWallet is Ownable, ReentrancyGuard, ERC2771Recipient {\\n    // -------------------------------------------------------------\\n    // STORAGE\\n    // --------------------------------------------------------------\\n    address public constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 public unlockDate;\\n    mapping(address => mapping(address => uint256)) public balances;\\n\\n    // --------------------------------------------------------------\\n    // EVENTS\\n    // --------------------------------------------------------------\\n    event Deposited(address from, address tokenId, uint256 amount);\\n    event Claimed(address from, address tokenId, uint256 amount);\\n\\n    // --------------------------------------------------------------\\n    // CUSTOM ERRORS\\n    // --------------------------------------------------------------\\n    error InvalidAmount();\\n    error TransferFailed();\\n    error IsStillLocked();\\n    error InsufficientBalance();\\n\\n    // --------------------------------------------------------------\\n    // CONSTRUCTOR\\n    // --------------------------------------------------------------\\n    constructor(address _trustedForwarder) {\\n        _setTrustedForwarder(_trustedForwarder);\\n        unlockDate = block.timestamp;\\n    }\\n\\n    // --------------------------------------------------------------\\n    // STATE-MODIFYING FUNCTIONS\\n    // --------------------------------------------------------------\\n\\n    function setUnlockDate(uint256 _unlockDate) public onlyOwner {\\n        unlockDate = _unlockDate;\\n    }\\n\\n    /// @notice Transfers Native or ERC20 tokens from the sender to the contract.\\n    /// @param _token Address of the token\\n    /// @param _amount Amount of tokens\\n    function deposit(address _token, uint256 _amount)\\n        public\\n        payable\\n        nonReentrant\\n    {\\n        if (_token != NATIVE) {\\n            balances[_token][_msgSender()] += _amount;\\n            IERC20(_token).transferFrom(_msgSender(), address(this), _amount);\\n        } else {\\n            if (msg.value != _amount) revert InvalidAmount();\\n            balances[_token][_msgSender()] += _amount;\\n        }\\n\\n        emit Deposited(_msgSender(), _token, _amount);\\n    }\\n\\n    /// @notice Transfers Native or ERC20 tokens from the contract to the recipient.\\n    /// @param _token Address of the token\\n    /// @param _amount Amount of tokens\\n    function claim(address _token, uint256 _amount) public nonReentrant {\\n        if (block.timestamp < unlockDate) revert IsStillLocked();\\n        if (balances[_token][_msgSender()] < _amount)\\n            revert InsufficientBalance();\\n\\n        balances[_token][_msgSender()] -= _amount;\\n\\n        if (_token == NATIVE) {\\n            (bool success, ) = payable(_msgSender()).call{value: _amount}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n        } else {\\n            IERC20(_token).transfer(_msgSender(), _amount);\\n        }\\n\\n        emit Claimed(_msgSender(), _token, _amount);\\n    }\\n\\n    function setTrustedForwarder(address _forwarder) public onlyOwner {\\n        _setTrustedForwarder(_forwarder);\\n    }\\n\\n    function _msgSender()\\n        internal\\n        view\\n        override(Context, ERC2771Recipient)\\n        returns (address sender)\\n    {\\n        sender = ERC2771Recipient._msgSender();\\n    }\\n\\n    function _msgData()\\n        internal\\n        view\\n        override(Context, ERC2771Recipient)\\n        returns (bytes calldata)\\n    {\\n        return ERC2771Recipient._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x51874700b9240321a9a5403d6b263fad9e41b0db7c2bcb12dbff38904d5851dc\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620014a6380380620014a68339818101604052810190620000379190620002a7565b620000576200004b6200007d60201b60201c565b6200009960201b60201c565b600180819055506200006f816200015d60201b60201c565b4260038190555050620002d9565b600062000094620001a160201b62000a551760201c565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006014600036905010158015620001c65750620001c533620001e360201b60201c565b5b15620001dc57601436033560601c9050620001e0565b3390505b90565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200026f8262000242565b9050919050565b620002818162000262565b81146200028d57600080fd5b50565b600081519050620002a18162000276565b92915050565b600060208284031215620002c057620002bf6200023d565b5b6000620002d08482850162000290565b91505092915050565b6111bd80620002e96000396000f3fe6080604052600436106100a75760003560e01c8063aad3ec9611610064578063aad3ec961461019d578063bacb5d1c146101c6578063c23f001f146101ef578063ce1b815f1461022c578063da74222814610257578063f2fde38b14610280576100a7565b806347e7ef24146100ac578063572b6c05146100c857806369ac572114610105578063715018a6146101305780638da5cb5b14610147578063a0cf0aea14610172575b600080fd5b6100c660048036038101906100c19190610d12565b6102a9565b005b3480156100d457600080fd5b506100ef60048036038101906100ea9190610d52565b610541565b6040516100fc9190610d9a565b60405180910390f35b34801561011157600080fd5b5061011a61059b565b6040516101279190610dc4565b60405180910390f35b34801561013c57600080fd5b506101456105a1565b005b34801561015357600080fd5b5061015c6105b5565b6040516101699190610dee565b60405180910390f35b34801561017e57600080fd5b506101876105de565b6040516101949190610dee565b60405180910390f35b3480156101a957600080fd5b506101c460048036038101906101bf9190610d12565b6105f6565b005b3480156101d257600080fd5b506101ed60048036038101906101e89190610e09565b61095d565b005b3480156101fb57600080fd5b5061021660048036038101906102119190610e36565b61096f565b6040516102239190610dc4565b60405180910390f35b34801561023857600080fd5b50610241610994565b60405161024e9190610dee565b60405180910390f35b34801561026357600080fd5b5061027e60048036038101906102799190610d52565b6109be565b005b34801561028c57600080fd5b506102a760048036038101906102a29190610d52565b6109d2565b005b6102b1610a8c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461041f5780600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610342610adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461038b9190610ea5565b925050819055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd6103b6610adb565b30846040518463ffffffff1660e01b81526004016103d693929190610ed9565b6020604051808303816000875af11580156103f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104199190610f3c565b506104f3565b803414610458576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006104a2610adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104eb9190610ea5565b925050819055505b7f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a761051c610adb565b838360405161052d93929190610ed9565b60405180910390a161053d610aea565b5050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b60035481565b6105a9610af3565b6105b36000610b71565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6105fe610a8c565b60035442101561063a576040517f8506a79300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610684610adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156106f7576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610741610adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461078a9190610f69565b9250508190555073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108885760006107e2610adb565b73ffffffffffffffffffffffffffffffffffffffff168260405161080590610fce565b60006040518083038185875af1925050503d8060008114610842576040519150601f19603f3d011682016040523d82523d6000602084013e610847565b606091505b5050905080610882576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061090f565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6108ac610adb565b836040518363ffffffff1660e01b81526004016108ca929190610fe3565b6020604051808303816000875af11580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d9190610f3c565b505b7ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683610938610adb565b838360405161094993929190610ed9565b60405180910390a1610959610aea565b5050565b610965610af3565b8060038190555050565b6004602052816000526040600020602052806000526040600020600091509150505481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109c6610af3565b6109cf81610c35565b50565b6109da610af3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a409061108f565b60405180910390fd5b610a5281610b71565b50565b60006014600036905010158015610a715750610a7033610541565b5b15610a8557601436033560601c9050610a89565b3390505b90565b600260015403610ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac8906110fb565b60405180910390fd5b6002600181905550565b6000610ae5610a55565b905090565b60018081905550565b610afb610adb565b73ffffffffffffffffffffffffffffffffffffffff16610b196105b5565b73ffffffffffffffffffffffffffffffffffffffff1614610b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6690611167565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ca982610c7e565b9050919050565b610cb981610c9e565b8114610cc457600080fd5b50565b600081359050610cd681610cb0565b92915050565b6000819050919050565b610cef81610cdc565b8114610cfa57600080fd5b50565b600081359050610d0c81610ce6565b92915050565b60008060408385031215610d2957610d28610c79565b5b6000610d3785828601610cc7565b9250506020610d4885828601610cfd565b9150509250929050565b600060208284031215610d6857610d67610c79565b5b6000610d7684828501610cc7565b91505092915050565b60008115159050919050565b610d9481610d7f565b82525050565b6000602082019050610daf6000830184610d8b565b92915050565b610dbe81610cdc565b82525050565b6000602082019050610dd96000830184610db5565b92915050565b610de881610c9e565b82525050565b6000602082019050610e036000830184610ddf565b92915050565b600060208284031215610e1f57610e1e610c79565b5b6000610e2d84828501610cfd565b91505092915050565b60008060408385031215610e4d57610e4c610c79565b5b6000610e5b85828601610cc7565b9250506020610e6c85828601610cc7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eb082610cdc565b9150610ebb83610cdc565b9250828201905080821115610ed357610ed2610e76565b5b92915050565b6000606082019050610eee6000830186610ddf565b610efb6020830185610ddf565b610f086040830184610db5565b949350505050565b610f1981610d7f565b8114610f2457600080fd5b50565b600081519050610f3681610f10565b92915050565b600060208284031215610f5257610f51610c79565b5b6000610f6084828501610f27565b91505092915050565b6000610f7482610cdc565b9150610f7f83610cdc565b9250828203905081811115610f9757610f96610e76565b5b92915050565b600081905092915050565b50565b6000610fb8600083610f9d565b9150610fc382610fa8565b600082019050919050565b6000610fd982610fab565b9150819050919050565b6000604082019050610ff86000830185610ddf565b6110056020830184610db5565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061107960268361100c565b91506110848261101d565b604082019050919050565b600060208201905081810360008301526110a88161106c565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006110e5601f8361100c565b91506110f0826110af565b602082019050919050565b60006020820190508181036000830152611114816110d8565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061115160208361100c565b915061115c8261111b565b602082019050919050565b6000602082019050818103600083015261118081611144565b905091905056fea2646970667358221220cf8d5da3317f97e824a0ef42a5b1ec29709d9126c2300ab3f0ad3aecdd58907664736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063aad3ec9611610064578063aad3ec961461019d578063bacb5d1c146101c6578063c23f001f146101ef578063ce1b815f1461022c578063da74222814610257578063f2fde38b14610280576100a7565b806347e7ef24146100ac578063572b6c05146100c857806369ac572114610105578063715018a6146101305780638da5cb5b14610147578063a0cf0aea14610172575b600080fd5b6100c660048036038101906100c19190610d12565b6102a9565b005b3480156100d457600080fd5b506100ef60048036038101906100ea9190610d52565b610541565b6040516100fc9190610d9a565b60405180910390f35b34801561011157600080fd5b5061011a61059b565b6040516101279190610dc4565b60405180910390f35b34801561013c57600080fd5b506101456105a1565b005b34801561015357600080fd5b5061015c6105b5565b6040516101699190610dee565b60405180910390f35b34801561017e57600080fd5b506101876105de565b6040516101949190610dee565b60405180910390f35b3480156101a957600080fd5b506101c460048036038101906101bf9190610d12565b6105f6565b005b3480156101d257600080fd5b506101ed60048036038101906101e89190610e09565b61095d565b005b3480156101fb57600080fd5b5061021660048036038101906102119190610e36565b61096f565b6040516102239190610dc4565b60405180910390f35b34801561023857600080fd5b50610241610994565b60405161024e9190610dee565b60405180910390f35b34801561026357600080fd5b5061027e60048036038101906102799190610d52565b6109be565b005b34801561028c57600080fd5b506102a760048036038101906102a29190610d52565b6109d2565b005b6102b1610a8c565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461041f5780600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610342610adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461038b9190610ea5565b925050819055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd6103b6610adb565b30846040518463ffffffff1660e01b81526004016103d693929190610ed9565b6020604051808303816000875af11580156103f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104199190610f3c565b506104f3565b803414610458576040517f2c5211c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006104a2610adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104eb9190610ea5565b925050819055505b7f8752a472e571a816aea92eec8dae9baf628e840f4929fbcc2d155e6233ff68a761051c610adb565b838360405161052d93929190610ed9565b60405180910390a161053d610aea565b5050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b60035481565b6105a9610af3565b6105b36000610b71565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6105fe610a8c565b60035442101561063a576040517f8506a79300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610684610adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156106f7576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610741610adb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461078a9190610f69565b9250508190555073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108885760006107e2610adb565b73ffffffffffffffffffffffffffffffffffffffff168260405161080590610fce565b60006040518083038185875af1925050503d8060008114610842576040519150601f19603f3d011682016040523d82523d6000602084013e610847565b606091505b5050905080610882576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061090f565b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb6108ac610adb565b836040518363ffffffff1660e01b81526004016108ca929190610fe3565b6020604051808303816000875af11580156108e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090d9190610f3c565b505b7ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd3992683610938610adb565b838360405161094993929190610ed9565b60405180910390a1610959610aea565b5050565b610965610af3565b8060038190555050565b6004602052816000526040600020602052806000526040600020600091509150505481565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6109c6610af3565b6109cf81610c35565b50565b6109da610af3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610a49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a409061108f565b60405180910390fd5b610a5281610b71565b50565b60006014600036905010158015610a715750610a7033610541565b5b15610a8557601436033560601c9050610a89565b3390505b90565b600260015403610ad1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac8906110fb565b60405180910390fd5b6002600181905550565b6000610ae5610a55565b905090565b60018081905550565b610afb610adb565b73ffffffffffffffffffffffffffffffffffffffff16610b196105b5565b73ffffffffffffffffffffffffffffffffffffffff1614610b6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6690611167565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ca982610c7e565b9050919050565b610cb981610c9e565b8114610cc457600080fd5b50565b600081359050610cd681610cb0565b92915050565b6000819050919050565b610cef81610cdc565b8114610cfa57600080fd5b50565b600081359050610d0c81610ce6565b92915050565b60008060408385031215610d2957610d28610c79565b5b6000610d3785828601610cc7565b9250506020610d4885828601610cfd565b9150509250929050565b600060208284031215610d6857610d67610c79565b5b6000610d7684828501610cc7565b91505092915050565b60008115159050919050565b610d9481610d7f565b82525050565b6000602082019050610daf6000830184610d8b565b92915050565b610dbe81610cdc565b82525050565b6000602082019050610dd96000830184610db5565b92915050565b610de881610c9e565b82525050565b6000602082019050610e036000830184610ddf565b92915050565b600060208284031215610e1f57610e1e610c79565b5b6000610e2d84828501610cfd565b91505092915050565b60008060408385031215610e4d57610e4c610c79565b5b6000610e5b85828601610cc7565b9250506020610e6c85828601610cc7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eb082610cdc565b9150610ebb83610cdc565b9250828201905080821115610ed357610ed2610e76565b5b92915050565b6000606082019050610eee6000830186610ddf565b610efb6020830185610ddf565b610f086040830184610db5565b949350505050565b610f1981610d7f565b8114610f2457600080fd5b50565b600081519050610f3681610f10565b92915050565b600060208284031215610f5257610f51610c79565b5b6000610f6084828501610f27565b91505092915050565b6000610f7482610cdc565b9150610f7f83610cdc565b9250828203905081811115610f9757610f96610e76565b5b92915050565b600081905092915050565b50565b6000610fb8600083610f9d565b9150610fc382610fa8565b600082019050919050565b6000610fd982610fab565b9150819050919050565b6000604082019050610ff86000830185610ddf565b6110056020830184610db5565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061107960268361100c565b91506110848261101d565b604082019050919050565b600060208201905081810360008301526110a88161106c565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006110e5601f8361100c565b91506110f0826110af565b602082019050919050565b60006020820190508181036000830152611114816110d8565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061115160208361100c565b915061115c8261111b565b602082019050919050565b6000602082019050818103600083015261118081611144565b905091905056fea2646970667358221220cf8d5da3317f97e824a0ef42a5b1ec29709d9126c2300ab3f0ad3aecdd58907664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address,uint256)": {
        "params": {
          "_amount": "Amount of tokens",
          "_token": "Address of the token"
        }
      },
      "deposit(address,uint256)": {
        "params": {
          "_amount": "Amount of tokens",
          "_token": "Address of the token"
        }
      },
      "getTrustedForwarder()": {
        "returns": {
          "forwarder": "The address of the Forwarder contract that is being used."
        }
      },
      "isTrustedForwarder(address)": {
        "params": {
          "forwarder": "The address of the Forwarder contract that is being used."
        },
        "returns": {
          "_0": "isTrustedForwarder `true` if the Forwarder is trusted to forward relayed transactions by this Recipient."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(address,uint256)": {
        "notice": "Transfers Native or ERC20 tokens from the contract to the recipient."
      },
      "deposit(address,uint256)": {
        "notice": "Transfers Native or ERC20 tokens from the sender to the contract."
      },
      "getTrustedForwarder()": {
        "notice": ":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder.Method is not a required method to allow Recipients to trust multiple Forwarders. Not recommended yet."
      },
      "isTrustedForwarder(address)": {
        "notice": ":warning: **Warning** :warning: The Forwarder can have a full control over your Recipient. Only trust verified Forwarder."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 134,
        "contract": "contracts/TimeLockedWallet.sol:TimeLockedWallet",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 250,
        "contract": "contracts/TimeLockedWallet.sol:TimeLockedWallet",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/TimeLockedWallet.sol:TimeLockedWallet",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 410,
        "contract": "contracts/TimeLockedWallet.sol:TimeLockedWallet",
        "label": "unlockDate",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 416,
        "contract": "contracts/TimeLockedWallet.sol:TimeLockedWallet",
        "label": "balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}